#!/usr/bin/env perl

use strict;
use warnings;

use JSON::XS;
use File::Slurp;
use Encode;

$| = 1;
print scalar <STDIN>;
print scalar <STDIN>;

my %levels = (
  "vol" => ["\x{1f568}", "\x{1f569}", "\x{1f56a}"],
);

while (my ($statusline) = (<STDIN> =~ /^,?(.*)/)) {
  my @blocks = @{decode_json($statusline)};
  
  my $vol = get_vol("alsa_output.pci-0000_00_1b.0.analog-stereo");
  @blocks = (
    {
      full_text => decode(utf8 => read_file($ENV{HOME}."/.local-temp")) . " ",
      name => 'temp',
    },
    {
      full_text => sprintf(" %s%% ", $vol),
      name => 'vol'
    },
    @blocks,
  );

  for my $block (@blocks) {
    if (my $parts = $levels{$block->{name}}) {
      my ($percent) = $block->{full_text} =~ /(\d+)%/;
      my $max = @$parts - 1;
      my $i =  sprintf("%.0f", ($percent * 0.01) * $max);
      my $icon = $levels{$block->{name}}->[$i];
      $block->{full_text} =~ s/(\d+%)/$icon $1/;
    }
  }

  print encode_json(\@blocks) . ",\n";
}

sub get_vol {
  my $search = shift;
  my @lines = split /[\r\n]/, qx{pactl list sinks};

  while (@lines) {
    my $line = shift @lines;
    last if $line =~ /Name:\s+\Q$search\E/;
  }

  while (@lines) {
    my $line = shift @lines;
    return $1 if $line =~ /Volume:.+?(\d+)%/;
  }

  return "?";
}
